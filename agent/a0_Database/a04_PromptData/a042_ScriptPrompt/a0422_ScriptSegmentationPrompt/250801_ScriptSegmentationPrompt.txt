pip install spacy

python -m spacy download ko_core_news_sm
python -m spacy download en_core_web_sm
python -m spacy download ja_core_news_sm
python -m spacy download zh_core_web_sm
python -m spacy download es_core_news_sm
python -m spacy download de_core_news_sm
python -m spacy download fr_core_news_sm

## 주요 프로세스 과정 ##
- 완성된 ScriptSegmentation의 형식은 모두 동일해야함 (TXT 및 JSON 형식으로 TXT -> JSON 변형이 간소화 프로세스가 되어야 함)
- (ScriptStructuration) 프로세스는 (Upload)ScriptSegmentation의 다음 프로세스로 별도로 만들기 (매우 여러곳에 범용으로 사용될 에정)

- Translation 경우
1. Segmentation + Structuration Translation PDF (전체)
2. Segmentation + Structuration Translation TXT (전체)
3. Segmentation이 완료된 파일을 업로드한 경우 Structuration Translation TXT (간소화)

- Translation 이후 연속 Audiobook 경우
1. Structuration Audiobook TXT (간소화)

- Audiobook 경우
1. Segmentation + Structuration Audiobook PDF (전체)
2. Segmentation + Structuration Audiobook TXT (전체)
3. Segmentation이 완료된 파일을 업로드한 경우 Structuration Audiobook TXT (간소화)

- 추가: ScriptGen 이후 연속 Translation, Audiobook 경우 (ScriptGen도 완성된 ScriptSegmentation의 형식으로 완성)
1. Structuration Translation TXT (간소화)
2. Structuration Audiobook TXT (간소화)

ScriptGen은 이전 테스크 유무를 통해 확인 가능
Audiobook, Translation은 다음 테스크 유무를 통해 확인 가능
PDF, TXT는 파일 확장자를 통해 확인 가능
PDF는 무조건 전체이며, TXT 간소화는 내부 TXT파일 구조를 통해 확인 가능

## 메모 ##
- 전처리 프로세스는 전체 언어로 처리
- Content 내에 각 요소를 오디오북 솔루션의 효과음 표기 처럼 (마치 html처럼) 표기
- 일반 txt인 경우에는 2,000~3,000 지정 토큰 수에 맞게 분힐(문장 단위)
- 한/영 프롬프트 모두 만들기
- 문장 나눌때는 자연어 모델로 분할해달라고 하기
- Task Process는 하나의 모듈로 구현 후 모든 프로세스 진행하기

**- Estimate의 Script 업로드의 경우 파일이름 지정하지 않고 무조건 내부에 txt 또는 pdf가 있으면 이를 txt화하여 진행하도록 변경 -> 그리고 해당파일은 견적 후 삭제(이렇게 해야 프로세스가 꼬이지 않음) 또는 파일명을 변경하는 테스크를 가장 앞으로 설정




#########
## PDF ##
#########




#P01 통합: (PDF)ScriptLoad (업로드 된 스크립트 파일 확인)




#P02 PDFMainLangCheck (PDF 언어 체크)
언어 -> Ko, En, Ja ...
[한글]
(역할 및 업무)
당신은 언어 데이터 전문가 입니다. 주어진 <도서페이지> 자료 10개를 보고 해당 도서의 (언어태그)를 지정하여 <도서언어태그.json>로 완성하는 업무를 수행합니다.

(언어태그)
ko: Korean - 한국어 - 한국어
en: English - English - 영어
de: German - Deutsch - 독일어
fr: French - Français - 프랑스어
es: Spanish - Español - 스페인어
zh: Chinese - 中文 - 중국어
ja: Japanese - 日本語 - 일본어
it: Italian - Italiano - 이탈리아어
pt: Portuguese - Português - 포르투갈어
nl: Dutch - Nederlands - 네덜란드어
sv: Swedish - Svenska - 스웨덴어
no: Norwegian - Norsk - 노르웨이어
da: Danish - Dansk - 덴마크어
pl: Polish - Polski - 폴란드어

(<도서언어태그.json>의 구조 및 내용)
{
    '언어': {
        '태그': 'ko, en, de ... pl 중 <도서페이지>의 언어태그를 지정'
    }
}

(주어진 <도서페이지> 자료 10개를 보고 해당 도서의 (언어태그)를 지정하여 <도서언어태그.json>로 완성해주세요)
<도서언어태그.json>


[English]
(Role and Task)
You are a Language Data Expert. Your task is to analyze the ten given <BookPage> data items, determine the single (LanguageTag) for the book, and complete the task by generating a <BookLanguageTag.json> file.

(LanguageTags)
ko: Korean - 한국어
en: English - English
de: German - Deutsch
fr: French - Français
es: Spanish - Español
zh: Chinese - 中文
ja: Japanese - 日本語
it: Italian - Italiano
pt: Portuguese - Português
nl: Dutch - Nederlands
sv: Swedish - Svenska
no: Norwegian - Norsk
da: Danish - Dansk
pl: Polish - Polski

(Structure and Content of <BookLanguageTag.json>)
{
    'Language': {
        'Tag': 'Based on the <BookPage> data, assign the single language tag for the book from the list: ko, en, de, ..., pl'
    }
}

(Please analyze the ten given <BookPage> data items, determine the single (LanguageTag) for the book, and provide the output in the <BookLanguageTag.json> format)
<BookLanguageTag.json>




#P03 PDFLayoutCheck (PDF 인쇄 파일 형식인 단면, 양면 체크)
[한글]
(역할 및 업무)
당신은 도서인쇄 검수 전문가 입니다. 주어진 <도서인쇄> 자료 10개를 보고 각각 (도서인쇄레이아웃)을 지정하여 <도서인쇄레이아웃.json>로 완성하는 업무를 수행합니다.

(도서인쇄레이아웃)
단면: 한장의 인쇄물이 도서 한페이지로 되어 있는 경우로 보통 세로가 가로보다 길다.
양면: 한장의 인쇄물이 도서 두페이지로 되어 있는 경우로 보통 가로가 세로보다 길다.

(<도서인쇄레이아웃.json>의 구조 및 내용)
{
    '도서인쇄': [
        {
            '자료번호': n,
            '레이아웃': '단면, 양면 중 표기'
        },
        {
            '자료번호': n+1,
            '레이아웃': '단면, 양면 중 표기'
        },
        ...
        {
            '자료번호': n+4,
            '레이아웃': '단면, 양면 중 표기'
        }
    ]
}

(<도서인쇄레이아웃.json> 완성 절차 및 방법)
1. <도서인쇄> 자료는 이미지 파일 10개이며 각 파일별로 중앙 상단에 '자료번호: n'이 표기되어 있습니다.
2. (<도서인쇄레이아웃.json>의 구조 및 내용)에 따라, 각 <도서인쇄> 자료를 보고 '자료번호'와 '레이아웃'을 작성하여 <도서인쇄레이아웃.json>을 완성합니다.

(주어진 <도서인쇄> 자료 10개를 보고 각각 (도서인쇄레이아웃)을 지정하여 <도서인쇄레이아웃.json>로 완성해주세요)
<도서인쇄레이아웃.json>


[English]
(Role and Task)
You are a Book Printing Inspection Expert. Your task is to analyze ten given  data items, determine the (BookPrintingLayout) for each, and complete them into a <BookPrintingLayout.json> file.

(BookPrintingLayouts)
Single: When one printed sheet corresponds to one page of the book, usually with the vertical dimension longer than the horizontal.
Spread: When one printed sheet corresponds to two facing pages of the book, usually with the horizontal dimension longer than the vertical.

(Structure and Content of <BookPrintingLayout.json>)
{
    'BookPrinting': [
        {
            'DataNumber': n,
            'Layout': 'Single or Spread'
        },
        {
            'DataNumber': n+1,
            'Layout': 'Single or Spread'
        },
        ...
        {
            'DataNumber': n+4,
            'Layout': 'Single or Spread'
        }
    ]
}

(Procedure for completing <BookPrintingLayout.json>)
1. The  data consists of 10 image files. Each file is marked with 'DataNumber: n' in the top-center.
2. Following the structure and content of <BookPrintingLayout.json>, analyze each  item and record its 'DataNumber' and 'Layout' to complete the <BookPrintingLayout.json> file.

(Please analyze the ten given  data items, assign the (BookPrintingLayout) for each, and provide the output in the <BookPrintingLayout.json> format)
<BookPrintingLayout.json>




#P04 PDFResize (PDF 파일 재단)
[한글]
(역할 및 업무)
당신은 도서 재단 전문가 입니다. 주어진 <본문재단이필요한도서페이지> 자료 4개를 보고 <도서본문재단.json>로 완성하는 업무를 수행합니다.

(<도서본문재단.json>의 구조 및 내용)
{
    '재단': [
        {
            '재단선방향': '좌, 우, 위, 아래 중 표기',
            '본문재단선번호': n
        },
        ...
        {
            '재단선방향': '좌, 우, 위, 아래 중 표기',
            '본문재단선번호': n
        }
    ]
}

(<도서본문재단.json> 완성 절차 및 방법)
1. 도서본문재단이란 도서의 본문 페이지에서 본문 레이아웃 외곽에 존재하는 쪽수, 러닝헤드, 러닝풋, 장/절 제목표시, 권호 정보 등을 모두 재단하고 딱 본문 글만 남길 수 있도록하는 업무입니다.
2. 즉, 재단 후 본문만 남도록 본문 레이아웃과 가장 가까운 재단선을 찾는 업무입니다.
3. <본문재단이필요한도서페이지>는 동일한 도서 페이지를 4개로 나누어 각각 좌, 우, 위, 아래에 '재단선' 보기를 10개씩 표기한 자료입니다.
4. 각각의 <본문재단이필요한도서페이지>에는 '재단선방향'과 10개의 '재단선'들과 각 재단선별로 '재단선번호'가 표기되어 있습니다.
5. <도서본문재단.json> 완성 업무는, 우선 <본문재단이필요한도서페이지>의 '본문여부'가 맞으면 <도서페이지본문재단예시>를 참고하여 본문 레이아웃과 본문외곽 레이아웃을 분리하는 '본문재단선번호' n을 표기합니다.
6. 단, '재단선'이 본문 글자와 겹치면, 재단 시 글자가 잘리는 문제가 발생합니다. 따라서 선택된 '본문재단선번호'의 '재단선'이 본문 글자와 겹치는 경우는 바로 이전 '본문재단선번호' n을 표기합니다.
7. 만약, <본문재단이필요한도서페이지>가 본문의 내용을 담고 있는 페이지가 아닐 경우 <도서본문재단.json>의 '본문재단선번호'에는 모두 0을 표기합니다.
8. <본문재단이필요한도서페이지> 자료 4개의 '재단선방향'과 '본문재단번호'를 모두 표기하여 <도서본문재단.json>를 완성합니다.

(주어진 <본문재단이필요한도서페이지> 자료 4개를 보고 <도서본문재단.json>로 완성해주세요)
<도서본문재단.json>


[English]
(Role and Task)
You are a Book Cropping Expert. Your task is to analyze four given <BookPageNeedingBodyCrop> data items and complete the task by generating a <BookBodyCrop.json> file.

(Structure and Content of <BookBodyCrop.json>)
{
    'Cropping': [
        {
            'CropLineDirection': 'Indicate as Left, Right, Top, Bottom',
            'BodyCropLineNumber': n
        },
        ...
        {
            'CropLineDirection': 'Indicate as Left, Right, Top, Bottom',
            'BodyCropLineNumber': n
        }
    ]
}

(Procedure for completing <BookBodyCrop.json>)
1. Book body cropping is the task of trimming all elements outside the main body layout on a book's body page—such as page numbers, running heads, running foots, chapter/section titles, and volume/issue information—to leave only the body text itself.
2. In other words, it is the task of finding the crop line closest to the body text layout to ensure that only the body text remains after cropping.
3. The <BookPageNeedingBodyCrop> data consists of 4 items representing the same book page, with each item showing 10 'crop lines' for one of four directions: left, right, top, and bottom.
4. Each <BookPageNeedingBodyCrop> data item is marked with a 'CropLineDirection', 10 'crop lines', and a 'CropLineNumber' for each respective line.
5. To complete the <BookBodyCrop.json> file, if the <BookPageNeedingBodyCrop> item displays a body text page, you must identify the 'BodyCropLineNumber' n that separates the body layout from the outer layout elements.
6. However, if a 'crop line' overlaps with the body text, characters will be cut off during cropping. Therefore, if the selected 'crop line' overlaps with text, you must enter the previous 'CropLineNumber' n instead.
7. If a <BookPageNeedingBodyCrop> item does not show a page containing body text, enter 0 for the 'BodyCropLineNumber' in the <BookBodyCrop.json>.
8. Complete the <BookBodyCrop.json> file by entering the 'CropLineDirection' and the 'BodyCropLineNumber' for all four <BookPageNeedingBodyCrop> data items.

(Please analyze the four given <BookPageNeedingBodyCrop> data items and provide the output in the <BookBodyCrop.json> format)
<BookBodyCrop.json>




#P05 PDFSplit (PDF 파일 페이지 분할)




#P06 PDFFormCheck (PDF 파일 페이지 형식 체크)
형식 -> 표지, 목차, 본문, 빈지 ...
[한글]
(역할 및 업무)
당신은 도서 데이터 전문가 입니다. 주어진 <도서페이지> 자료 5개를 보고 각각 (도서페이지형식)을 지정하여 <도서페이지형식.json>로 완성하는 업무를 수행합니다.

(도서페이지형식)
표지: 책의 제목이 들어간 표지, 속표지 등
목차: 전체 목차를 보여주는 차례 페이지
서문-머리말: 저자나 추천인의 글, 프롤로그, 일러두기 등 본문 이해를 돕는 도입부 페이지
장-부: 새로운 장(Chapter)이나 부(Part)의 시작을 알리는 페이지로 본문 내용 없이 장-부 등의 책의 목차만 작성된 페이지, 단, 장-부의 소제목이나 간단한 소개등은 포함될 수 있음
장-부-본문: 글, 그림, 도표 등을 포함한 책의 핵심 내용인 본문과 장-부 등의 책의 목차가 함께 작성된 페이지로, 본문 내에서 장-부 등의 새로운 목차의 시작이 되는 페이지
본문: 글, 그림, 도표 등을 포함한 책의 핵심 내용인 본문 페이지
후기-에필로그: 저자의 말이나 이야기의 결말 부분 페이지
참고자료: 부록, 참고 문헌, 찾아보기 등 독자의 이해를 돕는 추가 정보 페이지
빈지: 글 내용이 전혀 없고 비어있거나 그림만 존재하는 페이지
간지: 글 내용이 전혀 없고 비어있거나, 글 내용이 있으나 본문과 직접적으로 이어지는 내용이 아닌 페이지
저작권-판권: 저작권 정보, 발행처, ISBN 등 법적 고지 페이지
광고: 다른 도서나 상품을 홍보하는 페이지

(<도서페이지형식.json>의 구조 및 내용)
{
    '도서': [
        {
            '자료번호': n,
            '페이지형식': '표지, 목차, 서문-머리말, 장-부, 장-부-본문, 본문, 후기-에필로그, 참고자료, 빈지, 간지, 저작권-판권, 광고 중 <도서페이지>에 적합한 페이지형식을 지정'
        },
        {
            '자료번호': n+1,
            '페이지형식': '표지, 목차, 서문-머리말, 장-부, 장-부-본문, 본문, 후기-에필로그, 참고자료, 빈지, 간지, 저작권-판권, 광고 중 <도서페이지>에 적합한 페이지형식을 지정'
        },
        ...
        {
            '자료번호': n+4,
            '페이지형식': '표지, 목차, 서문-머리말, 장-부, 장-부-본문, 본문, 후기-에필로그, 참고자료, 빈지, 간지, 저작권-판권, 광고 중 <도서페이지>에 적합한 페이지형식을 지정'
        }
    ]
}

(<페이지형식.json> 완성 절차 및 방법)
1. <도서페이지> 자료는 이미지 파일 5개이며 각 파일별로 중앙 상단에 '자료번호: n'이 표기되어 있습니다.
2. (<도서페이지형식.json>의 구조 및 내용)에 따라, 각 <도서페이지> 자료를 보고 '자료번호'와 '페이지형식'을 작성하여 <페이지형식.json>을 완성합니다.

(주어진 <도서페이지> 자료 5개를 보고 (도서페이지형식)을 지정하여 <도서페이지형식.json>로 완성해주세요)
<도서페이지형식.json>


[English]
(Role and Task)
You are a Book Data Expert. Your task is to analyze five given <BookPage> data items, determine the (BookPageType) for each, and complete the task by generating a <BookPageType.json> file.

(BookPageTypes)
Cover: The cover or title page containing the book's title.
TableOfContents: The page(s) showing the full table of contents.
Preface-Introduction: Introductory sections that aid in understanding the main text, such as a foreword, author’s note, prologue, or usage guide.
Chapter-Part-Start: A page that announces the beginning of a new chapter or part, containing only the chapter/part title or a brief subtitle/introductory note, but without the main body text.
Chapter-Part-Body: A page that both introduces a new chapter/part (with its title or heading) and contains the beginning of the body text, images, or diagrams.
Body: The core content of the book, including text, images, charts, and diagrams, excluding chapter/part title introductions.
Afterword-Epilogue: Concluding sections, such as an author’s closing remarks or the story’s epilogue.
ReferenceMaterial: Additional information to aid the reader, such as an appendix, bibliography, or index.
BlankPage: A page with no written content, entirely blank, or containing only illustrations without text.
DividerPage: A page with no body text content, used to separate sections, or containing non-continuous content that is not directly part of the main body.
Copyright-Colophon: Legal notice pages, including copyright information, publisher details, ISBN, etc.
Advertisement: A page promoting other books or products.

(Structure and Content of <BookPageType.json>)
{
    'Book': [
        {
            'DataNumber': n,
            'PageType': 'Assign the appropriate page type for the <BookPage> from the list: Cover, TableOfContents, Preface-Introduction, Chapter-Part-Start, Chapter-Part-Body, Body, Afterword-Epilogue, ReferenceMaterial, BlankPage, DividerPage, Copyright-Colophon, Advertisement'
        },
        {
            'DataNumber': n+1,
            'PageType': 'Assign the appropriate page type for the <BookPage> from the list: Cover, TableOfContents, Preface-Introduction, Chapter-Part-Start, Chapter-Part-Body, Body, Afterword-Epilogue, ReferenceMaterial, BlankPage, DividerPage, Copyright-Colophon, Advertisement'
        },
        ...
        {
            'DataNumber': n+4,
            'PageType': 'Assign the appropriate page type for the <BookPage> from the list: Cover, TableOfContents, Preface-Introduction, Chapter-Part-Start, Chapter-Part-Body, Body, Afterword-Epilogue, ReferenceMaterial, BlankPage, DividerPage, Copyright-Colophon, Advertisement'
        }
    ]
}

(Procedure for completing <BookPageType.json>)
1. The <BookPage> data consists of 5 image files. Each file is marked with 'DataNumber: n' in the top-center.
2. Following the JSON structure defined above, analyze each <BookPage> image and fill in the corresponding Data Number and Page Type to complete the <BookPageType.json> file.

(Please analyze the five given <BookPage> data items, assign the (BookPageType) for each, and provide the output in the <BookPageType.json> format)
<BookPageType.json>




#P07 PDFIndexGen (PDF 파일 목차 데이터 형성)
제목 -> Title
부제목 -> SubTitle
부 -> Part
장 -> Chapter
항, 목 -> Index
프롤로그, 에필로그 -> Logue
[한글]
(역할 및 업무)
당신은 도서 데이터 전문가 입니다. 주어진 <도서표지및목차페이지> 자료들을 보고 해당 도서의 목차를 (목차태그)에 따라서 하나하나를 분리하고 태그를 지정하고 목차를 작성하여 <도서목차.json>로 완성하는 업무를 수행합니다.

(목차태그)
제목: 도서의 제목
부제목: 도서의 부제목
부: 책의 가장 큰 단위 구성
장: 부 안에서 더 세부적으로 나눈 단위, 단 부가 생략되고 장부터 존재하는 경우도 있음
항목: 부, 장 안의 소주제나 세부 항목
로그: 본문 전후의 글로서 서문, 프롤로그, 에필로그 등
부록: 본문 뒤에 추가된 참고자료, 자료집, 색인 등

(<도서목차.json>의 구조 및 내용)
{
    '목차': [
        {
            '목차태크': '제목', '부제목', '부', '장', '항목', '로그' 중 <도서목차페이지>에 적합한 목차태그를 지정,
            '목차': '분리된 제목 또는 목차를 그대로 작성'
        },
        {
            '목차태크': '제목', '부제목', '부', '장', '항목', '로그' 중 <도서목차페이지>에 적합한 목차태그를 지정,
            '목차': '분리된 제목 또는 목차를 그대로 작성'
        },
        ...
        {
            '목차태크': '제목', '부제목', '부', '장', '항목', '로그' 중 <도서목차페이지>에 적합한 목차태그를 지정,
            '목차': '분리된 제목 또는 목차를 그대로 작성'
        },
    ]
}

(<도서목차.json> 완성 절차 및 방법)
1. <도서표지및목차페이지>는 도서의 표지나 목차로 예상되는 페이지로서 파일별로 중앙 상단에 '표지: n', '목차: 1', '목차: 2' ... 가 표기되어 있습니다.
2. (<도서목차.json>의 구조 및 내용)에 따라 <도서표지및목차페이지> 자료를 '표지: n', '목차: 1', '목차: 2' ... 순서대로 보고, 각각의 제목과 목차들을 분리합니다.
3. 분리된 제목과 목차를 순서대로 '목차태그'를 지정하고 '목차'로 작성하여 <도서목차.json>를 완성합니다.
4. 동일한 제목 또는 목차가 중복으로 있는 경우에는 하나만 작성합니다.
5. 제목, 부제목, 부, 장, 항목, 로그 하단 등에 부가설명이 있어도 부가설명은 따로 작성하지 않습니다.

(주어진 <도서표지및목차페이지> 자료들을 보고 해당 도서의 목차를 (목차태그)에 따라서 하나하나를 분리하고 태그를 지정하고 목차를 작성하여 <도서목차.json>로 완성해주세요)
<도서목차.json>


[English]
(Role and Task)
You are a Book Data Expert. Your task is to analyze the given <BookCoverAndContentsPage> data, segment each item of the book's table of contents, assign a (ContentsTag) to each segment, and generate a <BookTableOfContents.json> file with the transcribed content.

(ContentsTag)
Title: The title of the book.
Subtitle: The subtitle of the book.
Part: The largest division of the book.
Chapter: A more detailed division within a Part. In some cases, a book may start with Chapters without being divided into Parts.
Section: A sub-topic or detailed item within a Part or Chapter.
Logue: Text that appears before or after the main body, such as a preface, prologue, or epilogue.
Appendix: Supplementary material added at the end of the book, such as references, data collections, or an index.

(Structure and Content of <BookTableOfContents.json>)
{
    'TableOfContents': [
        {
            'ContentsTag': 'Assign the appropriate tag from the list: Title, Subtitle, Part, Chapter, Section, Logue, Appendix for the item from the <BookCoverAndContentsPage>',
            'Content': 'Transcribe the segmented title or contents item exactly as it appears'
        },
        {
            'ContentsTag': 'Assign the appropriate tag from the list: Title, Subtitle, Part, Chapter, Section, Logue, Appendix for the item from the <BookCoverAndContentsPage>',
            'Content': 'Transcribe the segmented title or contents item exactly as it appears'
        },
        ...
        {
            'ContentsTag': 'Assign the appropriate tag from the list: Title, Subtitle, Part, Chapter, Section, Logue, Appendix for the item from the <BookCoverAndContentsPage>',
            'Content': 'Transcribe the segmented title or contents item exactly as it appears'
        }
    ]
}

(Procedure for completing <BookTableOfContents.json>)
1. The <BookCoverAndContentsPage> data consists of pages presumed to be the book's cover or table of contents. Each file is marked in the top-center with 'Cover: n', 'Contents: 1', 'Contents: 2', etc.
2. Following the JSON structure defined above, process the <BookCoverAndContentsPage> data in the order of 'Cover: n', 'Contents: 1', 'Contents: 2', etc., and segment each title and contents item.
3. For each segmented title and contents item, assign the appropriate 'ContentsTag' and transcribe it under 'Content' in sequential order to complete the <BookTableOfContents.json> file.
4. If an identical title or contents item appears more than once, include it only once.
5. Do not include any supplementary descriptions that may appear below the Title, Subtitle, Part, Chapter, Section, or Logue entries.

(Please analyze the given <BookCoverAndContentsPage> data, segment each item of the book's table of contents according to the (ContentsTag), assign the appropriate tag, transcribe the content, and provide the output in the <BookTableOfContents.json> format)
<BookTableOfContents.json>


#P08 PDFIndexMatching (PDF 파일 목차와 본문 속 목차 매칭)
<제목></제목> -> Title
<부></부> -> Part
<장></장> -> Chapter
<항></항> -> Index
<로그></로그> -> Logue




#P09 PDFBodyCaptionComponentCheck (PDF 파일 페이지별 Body 구성요소 체크)
<본문></본문> -> Body(체크대상은 아님)
<캡션></캡션>, <이미지></이미지>, <다이어그램></다이어그램>, <차트></차트>, <그래프></그래프>, <표></표>, <코드></코드>, <공식></공식> -> Caption




#P10 PDFChunkAnnotationComponentCheck (PDF 파일 페이지별 Chunk, Annotation 구성요소 체크)
<문장></문장> -> Chunk(체크대상은 아님)
<특수문자></특수문자> -> Sign
<코멘트></코멘트> -> Comment
<주석></주석> -> Annotation




#########
## TXT ##
#########




#T01 통합: (TXT)ScriptLoad (업로드 된 스크립트 파일 확인)




#T02 TXTMainLangCheck (TXT 언어 체크)
언어 -> Ko, En, Ja ...
[한글]
(역할 및 업무)
당신은 언어 데이터 전문가 입니다. 주어진 <도서텍스트>를 보고 해당 도서의 (언어태그)를 지정하여 <도서언어태그.json>로 완성하는 업무를 수행합니다.

(언어태그)
ko: Korean - 한국어 - 한국어
en: English - English - 영어
de: German - Deutsch - 독일어
fr: French - Français - 프랑스어
es: Spanish - Español - 스페인어
zh: Chinese - 中文 - 중국어
ja: Japanese - 日本語 - 일본어
it: Italian - Italiano - 이탈리아어
pt: Portuguese - Português - 포르투갈어
nl: Dutch - Nederlands - 네덜란드어
sv: Swedish - Svenska - 스웨덴어
no: Norwegian - Norsk - 노르웨이어
da: Danish - Dansk - 덴마크어
pl: Polish - Polski - 폴란드어

(<도서언어태그.json>의 구조 및 내용)
{
    '언어': {
        '태그': 'ko, en, de ... pl 중 <도서텍스트>의 언어태그를 지정'
    }
}

(주어진 <도서텍스트>를 보고 해당 도서의 (언어태그)를 지정하여 <도서언어태그.json>로 완성해주세요)
<도서텍스트>

<도서언어태그.json>


[English]
(Role and Task)
You are a Language Data Expert. Your task is to analyze the given <BookText>, determine the (LanguageTag) for the book, and complete the task by generating a <BookLanguageTag.json> file.

(LanguageTags)
ko: Korean - 한국어
en: English - English
de: German - Deutsch
fr: French - Français
es: Spanish - Español
zh: Chinese - 中文
ja: Japanese - 日本語
it: Italian - Italiano
pt: Portuguese - Português
nl: Dutch - Nederlands
sv: Swedish - Svenska
no: Norwegian - Norsk
da: Danish - Dansk
pl: Polish - Polski

(Structure and Content of <BookLanguageTag.json>)
{
    'Language': {
        'Tag': 'Based on the <BookText>, assign the language tag for the book from the list: ko, en, de, ..., pl'
    }
}


(Please analyze the given <BookText>, determine the (LanguageTag) for the book, and provide the output in the <BookLanguageTag.json> format.)
<BookText>

<BookLanguageTag.json>




#T03 TXTSplit (텍스트 파일 지정 토큰수 분할)




#T04 TXTFormCheck (텍스트 파일 페이지 형식 체크)
형식 -> 목차, 본문
[한글]
(역할 및 업무)
당신은 도서 데이터 전문가 입니다. 주어진 <도서텍스트> 자료 5개를 보고 각각 (도서페이지형식)을 리스트 형식으로 지정하여 <도서페이지형식.json>로 완성하는 업무를 수행합니다.

(도서페이지형식)
표지: 책의 제목이 들어간 표지, 속표지 등
저작권-판권: 저작권 정보, 발행처, ISBN 등 법적 고지 부분
목차: 전체 목차를 보여주는 차례 부분
서문-머리말: 저자나 추천인의 글, 프롤로그, 일러두기 등 본문 이해를 돕는 도입부 부분
장-부 시작: 새로운 장(Chapter)이나 부(Part)의 시작을 알리는 부분
본문: 글, 그림, 도표 등을 포함한 책의 핵심 내용인 본문 부분
후기-에필로그: 저자의 말이나 이야기의 결말 부분
참고자료: 부록, 참고 문헌, 찾아보기 등 독자의 이해를 돕는 추가 정보 부분

(<페이지형식.json>의 구조 및 내용)
{
    '도서': [
        {
            '자료번호': 1
            '페이지형식': ['표지, 저작권-판권, 목차, 서문-머리말,', '장-부 시작, 본문, 후기-에필로그, 참고자료 중', '<도서텍스트>에 적합한 페이지형식을 지정']
        },
        {
            '자료번호': 2
            '페이지형식': ['표지, 저작권-판권, 목차, 서문-머리말,', '장-부 시작, 본문, 후기-에필로그, 참고자료 중', '<도서텍스트>에 적합한 페이지형식을 지정']
        },
        ...
    ]
}

(<페이지형식.json> 완성 절차 및 방법)
1. <도서텍스트> 자료는 텍스트 파일 5개이며 각 파일별로 시작 부분에 [자료번호: n]이 표기되어 있습니다.
2. (<도서페이지형식.json>의 구조 및 내용)에 따라, 각 <도서텍스트> 자료를 보고 '자료번호'와 '페이지형식'을 작성하여 <페이지형식.json>을 완성합니다.
3. <도서텍스트>내 하나의 [자료번호: n]에는 여러개의 페이지형식이 복합적으로 존재할 수 있음으로 '페이지형식'은 리스트 형식으로 작성합니다.

(주어진 <도서페이지> 자료 5개를 보고 (도서페이지형식)을 지정하여 <도서페이지형식.json>로 완성해주세요)
<도서텍스트>
[자료번호: 1]

[자료번호: 2]
...

<도서페이지형식.json>




#T05 TXTIndexGen (텍스트 파일 목차 데이터 형성)
제목 -> Title
부 -> Part
장 -> Chapter
항 -> Index
프롤로그, 에필로그 -> Logue




#T06 TXTIndexMatching (텍스트 파일 목차와 본문 속 목차 매칭)
<제목></제목> -> Title
<부></부> -> Part
<장></장> -> Chapter
<항></항> -> Index
<로그></로그> -> Logue




#T07 TXTBodyCaptionComponentCheck (텍스트 파일 페이지별 Body 구성요소 체크)
<본문></본문> -> Body(체크대상은 아님)
<캡션></캡션>, <이미지></이미지>, <다이어그램></다이어그램>, <차트></차트>, <그래프></그래프>, <표></표>, <코드></코드>, <공식></공식> -> Caption




#T08 TXTChunkAnnotationComponentCheck (텍스트 파일 페이지별 Chunk, Annotation 구성요소 체크)
<문장></문장> -> Chunk(체크대상은 아님)
<특수문자></특수문자> -> Sign
<코멘트></코멘트> -> Comment
<주석></주석> -> Annotation




############
## Script ##
############




#S01 CaptionGen (캡션 구조화 데이터 형성)




#S02 AnnotationGen (주석 구조화 데이터 형성)




#S03 ImageDescriptionGen (이미지설명 구조화 데이터 형성)




#S04 DiagramGen (다이어그램 구조화 데이터 형성)




#S05 ChartGen (차트 구조화 데이터 형성)




#S06 GraphGen (그래프 구조화 데이터 형성)




#S07 TableGen (테이블 구조화 데이터 형성)




#S08 SignGen (기호 및 특수문자 구조화 데이터 형성)




#S09 CommentGen (코멘트 구조화 데이터 형성)




#S10 BodyFrame (도서 전처리 구조화 데이터 완성)
Index(Title, Part, Chapter, Index, Logue)
Body(Body, Caption, Annotation)
Chunk(Chunk, Sign, Comment)


---- 후처리 ----


#1 Image(이미지), Annotation(주석) 미주로 처리 <- 이 부분은 번역 마지막 태스크



#2 Duplication <- 이 부분은 오디오북 앞 태스크 (위 프로세스가 모두 완료되면 필요 없음, 삭제)



#3 Pronunciation <- 이 부분은 오디오북 앞 태스크